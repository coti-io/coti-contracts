/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  TransferScalarTestsContract,
  TransferScalarTestsContractInterface,
} from "../../../../../contracts/mocks/utils/mpc/TransferScalarTestsContract";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint8",
            name: "a8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint8",
            name: "b8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "a16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "b16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "a32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "b32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "a64_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "b64_s",
            type: "uint256",
          },
        ],
        internalType: "struct TransferScalarTestsContract.AllGTCastingValues",
        name: "allGTCastingValues",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "new_a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "new_b",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "res",
        type: "bool",
      },
      {
        internalType: "uint8",
        name: "amount",
        type: "uint8",
      },
    ],
    name: "computeAndCheckTransfer16",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint8",
            name: "a8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint8",
            name: "b8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "a16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "b16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "a32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "b32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "a64_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "b64_s",
            type: "uint256",
          },
        ],
        internalType: "struct TransferScalarTestsContract.AllGTCastingValues",
        name: "allGTCastingValues",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "new_a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "new_b",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "res",
        type: "bool",
      },
      {
        internalType: "uint8",
        name: "amount",
        type: "uint8",
      },
    ],
    name: "computeAndCheckTransfer32",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtUint8",
            name: "a8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint8",
            name: "b8_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "a16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint16",
            name: "b16_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "a32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint32",
            name: "b32_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "a64_s",
            type: "uint256",
          },
          {
            internalType: "gtUint64",
            name: "b64_s",
            type: "uint256",
          },
        ],
        internalType: "struct TransferScalarTestsContract.AllGTCastingValues",
        name: "allGTCastingValues",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "new_a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "new_b",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "res",
        type: "bool",
      },
      {
        internalType: "uint8",
        name: "amount",
        type: "uint8",
      },
    ],
    name: "computeAndCheckTransfer64",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getResults",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "a",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "b",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "amount",
        type: "uint8",
      },
    ],
    name: "transferScalarTest",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061261f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806319902cb11461005c5780634717f97c1461007857806352fdcece14610098578063df6d2101146100b4578063ea8fe3d5146100e6575b600080fd5b61007660048036038101906100719190612250565b610102565b005b6100806105db565b60405161008f939291906122ee565b60405180910390f35b6100b260048036038101906100ad9190612250565b61061a565b005b6100ce60048036038101906100c99190612325565b61080f565b6040516100dd939291906122ee565b60405180910390f35b61010060048036038101906100fb9190612250565b610a2c565b005b600080600061011d8860c001518960e001518660ff16610d7d565b92509250925061012c83610e3c565b67ffffffffffffffff168760ff1614801561015b575061014b82610e3c565b67ffffffffffffffff168660ff16145b8015610172575061016b81610ed9565b1515851515145b6101b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a8906123fb565b60405180910390fd5b6101c788600001518960e001518660ff16610f80565b8093508194508295505050506101dc83610e3c565b67ffffffffffffffff168760ff1614801561020b57506101fb82610e3c565b67ffffffffffffffff168660ff16145b8015610222575061021b81610ed9565b1515851515145b610261576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610258906123fb565b60405180910390fd5b6102778860c0015189602001518660ff1661103f565b80935081945082955050505061028c83610e3c565b67ffffffffffffffff168760ff161480156102bb57506102ab82610e3c565b67ffffffffffffffff168660ff16145b80156102d257506102cb81610ed9565b1515851515145b610311576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610308906123fb565b60405180910390fd5b61032788604001518960e001518660ff166110ff565b80935081945082955050505061033c83610e3c565b67ffffffffffffffff168760ff1614801561036b575061035b82610e3c565b67ffffffffffffffff168660ff16145b8015610382575061037b81610ed9565b1515851515145b6103c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b8906123fb565b60405180910390fd5b6103d78860c0015189606001518660ff166111be565b8093508194508295505050506103ec83610e3c565b67ffffffffffffffff168760ff1614801561041b575061040b82610e3c565b67ffffffffffffffff168660ff16145b8015610432575061042b81610ed9565b1515851515145b610471576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610468906123fb565b60405180910390fd5b61048788608001518960e001518660ff1661127e565b80935081945082955050505061049c83610e3c565b67ffffffffffffffff168760ff161480156104cb57506104bb82610e3c565b67ffffffffffffffff168660ff16145b80156104e257506104db81610ed9565b1515851515145b610521576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610518906123fb565b60405180910390fd5b6105378860c001518960a001518660ff1661133d565b80935081945082955050505061054c83610e3c565b67ffffffffffffffff168760ff1614801561057b575061056b82610e3c565b67ffffffffffffffff168660ff16145b8015610592575061058b81610ed9565b1515851515145b6105d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c8906123fb565b60405180910390fd5b5050505050505050565b60008060008060009054906101000a900460ff16600060019054906101000a900460ff16600060029054906101000a900460ff16925092509250909192565b6000806000610635886040015189606001518660ff166113fd565b925092509250610644836114b6565b61ffff168760ff16148015610667575061065d826114b6565b61ffff168660ff16145b801561067e575061067781610ed9565b1515851515145b6106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b4906123fb565b60405180910390fd5b6106d3886000015189606001518660ff16611554565b8093508194508295505050506106e8836114b6565b61ffff168760ff1614801561070b5750610701826114b6565b61ffff168660ff16145b8015610722575061071b81610ed9565b1515851515145b610761576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610758906123fb565b60405180910390fd5b610777886040015189602001518660ff1661160d565b80935081945082955050505061078c836114b6565b61ffff168760ff161480156107af57506107a5826114b6565b61ffff168660ff16145b80156107c657506107bf81610ed9565b1515851515145b610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc906123fb565b60405180910390fd5b5050505050505050565b600080600061081c611f76565b610825876116c7565b816000018181525050610837866116c7565b81602001818152505061084c8760ff16611768565b8160400181815250506108618660ff16611768565b8160600181815250506108768760ff1661180a565b81608001818152505061088b8660ff1661180a565b8160a00181815250506108a08760ff166118ae565b8160c00181815250506108b58660ff166118ae565b8160e001818152505060008060006108d6846000015185602001518a611955565b9250925092506108e583611a0c565b6000806101000a81548160ff021916908360ff16021790555061090782611a0c565b600060016101000a81548160ff021916908360ff16021790555061092a81610ed9565b600060026101000a81548160ff02191690831515021790555061097b8460008054906101000a900460ff16600060019054906101000a900460ff16600060029054906101000a900460ff168c61061a565b6109b38460008054906101000a900460ff16600060019054906101000a900460ff16600060029054906101000a900460ff168c610a2c565b6109eb8460008054906101000a900460ff16600060019054906101000a900460ff16600060029054906101000a900460ff168c610102565b60008054906101000a900460ff16600060019054906101000a900460ff16600060029054906101000a900460ff169650965096505050505093509350939050565b6000806000610a4788608001518960a001518660ff16611aaa565b925092509250610a5683611b65565b63ffffffff168760ff16148015610a7d5750610a7182611b65565b63ffffffff168660ff16145b8015610a945750610a8d81610ed9565b1515851515145b610ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aca906123fb565b60405180910390fd5b610ae988600001518960a001518660ff16611c03565b809350819450829550505050610afe83611b65565b63ffffffff168760ff16148015610b255750610b1982611b65565b63ffffffff168660ff16145b8015610b3c5750610b3581610ed9565b1515851515145b610b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b72906123fb565b60405180910390fd5b610b91886080015189602001518660ff16611cbe565b809350819450829550505050610ba683611b65565b63ffffffff168760ff16148015610bcd5750610bc182611b65565b63ffffffff168660ff16145b8015610be45750610bdd81610ed9565b1515851515145b610c23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1a906123fb565b60405180910390fd5b610c3988604001518960a001518660ff16611d7a565b809350819450829550505050610c4e83611b65565b63ffffffff168760ff16148015610c755750610c6982611b65565b63ffffffff168660ff16145b8015610c8c5750610c8581610ed9565b1515851515145b610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc2906123fb565b60405180910390fd5b610ce1886080015189606001518660ff16611e35565b809350819450829550505050610cf683611b65565b63ffffffff168760ff16148015610d1d5750610d1182611b65565b63ffffffff168660ff16145b8015610d345750610d2d81610ed9565b1515851515145b610d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6a906123fb565b60405180910390fd5b5050505050505050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d28610db260048060046001611ef1565b8b8b8b67ffffffffffffffff166040518563ffffffff1660e01b8152600401610dde9493929190612465565b6060604051808303816000875af1158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2191906124d6565b92509250925082828295509550955050505093509350939050565b6000606473ffffffffffffffffffffffffffffffffffffffff16630cfed561600480811115610e6e57610e6d612529565b5b60f81b846040518363ffffffff1660e01b8152600401610e8f929190612593565b6020604051808303816000875af1158015610eae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed291906125bc565b9050919050565b600080606473ffffffffffffffffffffffffffffffffffffffff16630cfed56160006004811115610f0d57610f0c612529565b5b60f81b856040518363ffffffff1660e01b8152600401610f2e929190612593565b6020604051808303816000875af1158015610f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7191906125bc565b90506000811415915050919050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d28610fb560016004806001611ef1565b8b8b8b67ffffffffffffffff166040518563ffffffff1660e01b8152600401610fe19493929190612465565b6060604051808303816000875af1158015611000573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102491906124d6565b92509250925082828295509550955050505093509350939050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d286110756004600160046001611ef1565b8b8b8b67ffffffffffffffff166040518563ffffffff1660e01b81526004016110a19493929190612465565b6060604051808303816000875af11580156110c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e491906124d6565b92509250925082828295509550955050505093509350939050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d2861113460026004806001611ef1565b8b8b8b67ffffffffffffffff166040518563ffffffff1660e01b81526004016111609493929190612465565b6060604051808303816000875af115801561117f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a391906124d6565b92509250925082828295509550955050505093509350939050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d286111f46004600260046001611ef1565b8b8b8b67ffffffffffffffff166040518563ffffffff1660e01b81526004016112209493929190612465565b6060604051808303816000875af115801561123f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126391906124d6565b92509250925082828295509550955050505093509350939050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d286112b360036004806001611ef1565b8b8b8b67ffffffffffffffff166040518563ffffffff1660e01b81526004016112df9493929190612465565b6060604051808303816000875af11580156112fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132291906124d6565b92509250925082828295509550955050505093509350939050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d286113736004600360046001611ef1565b8b8b8b67ffffffffffffffff166040518563ffffffff1660e01b815260040161139f9493929190612465565b6060604051808303816000875af11580156113be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e291906124d6565b92509250925082828295509550955050505093509350939050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d2861143260028060026001611ef1565b8b8b8b61ffff166040518563ffffffff1660e01b81526004016114589493929190612465565b6060604051808303816000875af1158015611477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149b91906124d6565b92509250925082828295509550955050505093509350939050565b6000606473ffffffffffffffffffffffffffffffffffffffff16630cfed561600260048111156114e9576114e8612529565b5b60f81b846040518363ffffffff1660e01b815260040161150a929190612593565b6020604051808303816000875af1158015611529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154d91906125bc565b9050919050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d2861158960016002806001611ef1565b8b8b8b61ffff166040518563ffffffff1660e01b81526004016115af9493929190612465565b6060604051808303816000875af11580156115ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f291906124d6565b92509250925082828295509550955050505093509350939050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d286116436002600160026001611ef1565b8b8b8b61ffff166040518563ffffffff1660e01b81526004016116699493929190612465565b6060604051808303816000875af1158015611688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ac91906124d6565b92509250925082828295509550955050505093509350939050565b6000606473ffffffffffffffffffffffffffffffffffffffff1663d9b60b60600160048111156116fa576116f9612529565b5b60f81b8460ff166040518363ffffffff1660e01b815260040161171e929190612593565b6020604051808303816000875af115801561173d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176191906125bc565b9050919050565b6000606473ffffffffffffffffffffffffffffffffffffffff1663d9b60b606002600481111561179b5761179a612529565b5b60f81b8461ffff166040518363ffffffff1660e01b81526004016117c0929190612593565b6020604051808303816000875af11580156117df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180391906125bc565b9050919050565b6000606473ffffffffffffffffffffffffffffffffffffffff1663d9b60b606003600481111561183d5761183c612529565b5b60f81b8463ffffffff166040518363ffffffff1660e01b8152600401611864929190612593565b6020604051808303816000875af1158015611883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a791906125bc565b9050919050565b6000606473ffffffffffffffffffffffffffffffffffffffff1663d9b60b606004808111156118e0576118df612529565b5b60f81b8467ffffffffffffffff166040518363ffffffff1660e01b815260040161190b929190612593565b6020604051808303816000875af115801561192a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194e91906125bc565b9050919050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d28611989600180600180611ef1565b8b8b8b60ff166040518563ffffffff1660e01b81526004016119ae9493929190612465565b6060604051808303816000875af11580156119cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f191906124d6565b92509250925082828295509550955050505093509350939050565b6000606473ffffffffffffffffffffffffffffffffffffffff16630cfed56160016004811115611a3f57611a3e612529565b5b60f81b846040518363ffffffff1660e01b8152600401611a60929190612593565b6020604051808303816000875af1158015611a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa391906125bc565b9050919050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d28611adf60038060036001611ef1565b8b8b8b63ffffffff166040518563ffffffff1660e01b8152600401611b079493929190612465565b6060604051808303816000875af1158015611b26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4a91906124d6565b92509250925082828295509550955050505093509350939050565b6000606473ffffffffffffffffffffffffffffffffffffffff16630cfed56160036004811115611b9857611b97612529565b5b60f81b846040518363ffffffff1660e01b8152600401611bb9929190612593565b6020604051808303816000875af1158015611bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfc91906125bc565b9050919050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d28611c3860016003806001611ef1565b8b8b8b63ffffffff166040518563ffffffff1660e01b8152600401611c609493929190612465565b6060604051808303816000875af1158015611c7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca391906124d6565b92509250925082828295509550955050505093509350939050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d28611cf46003600160036001611ef1565b8b8b8b63ffffffff166040518563ffffffff1660e01b8152600401611d1c9493929190612465565b6060604051808303816000875af1158015611d3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5f91906124d6565b92509250925082828295509550955050505093509350939050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d28611daf60026003806001611ef1565b8b8b8b63ffffffff166040518563ffffffff1660e01b8152600401611dd79493929190612465565b6060604051808303816000875af1158015611df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1a91906124d6565b92509250925082828295509550955050505093509350939050565b600080600080600080606473ffffffffffffffffffffffffffffffffffffffff166356c72d28611e6b6003600260036001611ef1565b8b8b8b63ffffffff166040518563ffffffff1660e01b8152600401611e939493929190612465565b6060604051808303816000875af1158015611eb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed691906124d6565b92509250925082828295509550955050505093509350939050565b6000816002811115611f0657611f05612529565b5b60ff166008846004811115611f1e57611f1d612529565b5b61ffff16901b61ffff166010866004811115611f3d57611f3c612529565b5b62ffffff16901b62ffffff166018886004811115611f5e57611f5d612529565b5b63ffffffff16901b17171760e01b9050949350505050565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61201882611fcf565b810181811067ffffffffffffffff8211171561203757612036611fe0565b5b80604052505050565b600061204a611fbb565b9050612056828261200f565b919050565b6000819050919050565b61206e8161205b565b811461207957600080fd5b50565b60008135905061208b81612065565b92915050565b61209a8161205b565b81146120a557600080fd5b50565b6000813590506120b781612091565b92915050565b6120c68161205b565b81146120d157600080fd5b50565b6000813590506120e3816120bd565b92915050565b6120f28161205b565b81146120fd57600080fd5b50565b60008135905061210f816120e9565b92915050565b6000610100828403121561212c5761212b611fca565b5b612137610100612040565b905060006121478482850161207c565b600083015250602061215b8482850161207c565b602083015250604061216f848285016120a8565b6040830152506060612183848285016120a8565b6060830152506080612197848285016120d4565b60808301525060a06121ab848285016120d4565b60a08301525060c06121bf84828501612100565b60c08301525060e06121d384828501612100565b60e08301525092915050565b600060ff82169050919050565b6121f5816121df565b811461220057600080fd5b50565b600081359050612212816121ec565b92915050565b60008115159050919050565b61222d81612218565b811461223857600080fd5b50565b60008135905061224a81612224565b92915050565b6000806000806000610180868803121561226d5761226c611fc5565b5b600061227b88828901612115565b95505061010061228d88828901612203565b94505061012061229f88828901612203565b9350506101406122b18882890161223b565b9250506101606122c388828901612203565b9150509295509295909350565b6122d9816121df565b82525050565b6122e881612218565b82525050565b600060608201905061230360008301866122d0565b61231060208301856122d0565b61231d60408301846122df565b949350505050565b60008060006060848603121561233e5761233d611fc5565b5b600061234c86828701612203565b935050602061235d86828701612203565b925050604061236e86828701612203565b9150509250925092565b600082825260208201905092915050565b7f7472616e73666572546573743a20636865636b207363616c6172206661696c6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b60006123e5602183612378565b91506123f082612389565b604082019050919050565b60006020820190508181036000830152612414816123d8565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6124508161241b565b82525050565b61245f8161205b565b82525050565b600060808201905061247a6000830187612447565b6124876020830186612456565b6124946040830185612456565b6124a16060830184612456565b95945050505050565b6124b38161205b565b81146124be57600080fd5b50565b6000815190506124d0816124aa565b92915050565b6000806000606084860312156124ef576124ee611fc5565b5b60006124fd868287016124c1565b935050602061250e868287016124c1565b925050604061251f868287016124c1565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b61258d81612558565b82525050565b60006040820190506125a86000830185612584565b6125b56020830184612456565b9392505050565b6000602082840312156125d2576125d1611fc5565b5b60006125e0848285016124c1565b9150509291505056fea26469706673582212203f7c1e238fdd61cc4936ebe41b048e1f28b48c0649260d091e95cdba16be526c64736f6c63430008140033";

type TransferScalarTestsContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransferScalarTestsContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TransferScalarTestsContract__factory extends ContractFactory {
  constructor(...args: TransferScalarTestsContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TransferScalarTestsContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TransferScalarTestsContract__factory {
    return super.connect(runner) as TransferScalarTestsContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransferScalarTestsContractInterface {
    return new Interface(_abi) as TransferScalarTestsContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TransferScalarTestsContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TransferScalarTestsContract;
  }
}
