/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../common";
import type {
  TestMpcCore,
  TestMpcCoreInterface,
} from "../../../../../../contracts/mocks/utils/mpc/AddressTestsContract.sol/TestMpcCore";

const _abi = [
  {
    inputs: [],
    name: "decryptNetworkEncryptedAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isEqual",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "networkEncryptedAddress",
    outputs: [
      {
        internalType: "ctUint64",
        name: "ct1",
        type: "uint256",
      },
      {
        internalType: "ctUint64",
        name: "ct2",
        type: "uint256",
      },
      {
        internalType: "ctUint32",
        name: "ct3",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "plaintextAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "ctUint64",
                name: "ct1",
                type: "uint256",
              },
              {
                internalType: "ctUint64",
                name: "ct2",
                type: "uint256",
              },
              {
                internalType: "ctUint32",
                name: "ct3",
                type: "uint256",
              },
            ],
            internalType: "struct ctAddress",
            name: "ciphertext",
            type: "tuple",
          },
          {
            internalType: "bytes",
            name: "signature1",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature2",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature3",
            type: "bytes",
          },
        ],
        internalType: "struct itAddress",
        name: "a_",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "ctUint64",
                name: "ct1",
                type: "uint256",
              },
              {
                internalType: "ctUint64",
                name: "ct2",
                type: "uint256",
              },
              {
                internalType: "ctUint32",
                name: "ct3",
                type: "uint256",
              },
            ],
            internalType: "struct ctAddress",
            name: "ciphertext",
            type: "tuple",
          },
          {
            internalType: "bytes",
            name: "signature1",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature2",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature3",
            type: "bytes",
          },
        ],
        internalType: "struct itAddress",
        name: "b_",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "useEq",
        type: "bool",
      },
    ],
    name: "setIsEqual",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "ctUint64",
                name: "ct1",
                type: "uint256",
              },
              {
                internalType: "ctUint64",
                name: "ct2",
                type: "uint256",
              },
              {
                internalType: "ctUint32",
                name: "ct3",
                type: "uint256",
              },
            ],
            internalType: "struct ctAddress",
            name: "ciphertext",
            type: "tuple",
          },
          {
            internalType: "bytes",
            name: "signature1",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature2",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature3",
            type: "bytes",
          },
        ],
        internalType: "struct itAddress",
        name: "it_",
        type: "tuple",
      },
    ],
    name: "setNetworkEncryptedAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setPublicAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "setRandomAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "ctUint64",
                name: "ct1",
                type: "uint256",
              },
              {
                internalType: "ctUint64",
                name: "ct2",
                type: "uint256",
              },
              {
                internalType: "ctUint32",
                name: "ct3",
                type: "uint256",
              },
            ],
            internalType: "struct ctAddress",
            name: "ciphertext",
            type: "tuple",
          },
          {
            internalType: "bytes",
            name: "signature1",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature2",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature3",
            type: "bytes",
          },
        ],
        internalType: "struct itAddress",
        name: "it_",
        type: "tuple",
      },
    ],
    name: "setUserEncryptedAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "userEncryptedAddress",
    outputs: [
      {
        internalType: "ctUint64",
        name: "ct1",
        type: "uint256",
      },
      {
        internalType: "ctUint64",
        name: "ct2",
        type: "uint256",
      },
      {
        internalType: "ctUint32",
        name: "ct3",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506111a2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063a29dc71111610076578063afd2c8661161005b578063afd2c866146101a4578063d4fd29aa146101ac578063ef6e9406146101bf57600080fd5b8063a29dc71114610175578063acbe84521461018757600080fd5b80633822b754116100a75780633822b7541461010a5780634993ba481461014f5780635f1c90f41461016257600080fd5b8063206e6efb146100c3578063253426bf146100d8575b600080fd5b6100d66100d1366004610d96565b6101c7565b005b6001546002546003546100ea92919083565b604080519384526020840192909252908201526060015b60405180910390f35b60075461012a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610101565b6100d661015d366004610de4565b6101f6565b6100d6610170366004610e61565b610289565b6004546005546006546100ea92919083565b6000546101949060ff1681565b6040519015158152602001610101565b6100d6610297565b6100d66101ba366004610e61565b6102c4565b6100d66102f5565b60006101d282610375565b90506101de8133610404565b80516001556020810151600255604001516003555050565b600061020961020485610fbc565b610489565b9050600061021961020485610fbc565b9050600083156102345761022d8383610557565b9050610249565b61024661024184846105a9565b6105f3565b90505b61025281610695565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055505050505050565b60006101d261020483610fbc565b60006102a1610726565b90506102ad8133610404565b805160015560208101516002556040015160035550565b60006102d261020483610fbc565b90506102dd81610797565b80516004556020810151600555604001516006555050565b6040805160608101825260045481526005546020820152600654918101919091526000906103229061080d565b905061032d81610883565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550565b61039960405180606001604052806000815260200160008152602001600081525090565b6103bd60405180606001604052806000815260200160008152602001600081525090565b6103cc8360601b60c01c610937565b81526103e567ffffffffffffffff602085901c16610937565b60208201526103f963ffffffff84166109a7565b604082015292915050565b61042860405180606001604052806000815260200160008152602001600081525090565b61044c60405180606001604052806000815260200160008152602001600081525090565b83516104589084610a13565b815260208401516104699084610a13565b6020820152604084015161047d9084610ad6565b60408201529392505050565b6104ad60405180606001604052806000815260200160008152602001600081525090565b6104d160405180606001604052806000815260200160008152602001600081525090565b604080518082019091526000815260606020808301918252855151835285015190526104fc81610ae6565b82528351602090810151825260408501519082015261051a81610ae6565b602080840191909152604080518082018252865190910151815260608601519181019190915261054981610b37565b604084015250909392505050565b60008061056c84600001518460000151610b47565b90506105898161058486602001518660200151610b47565b610bc7565b90506105a18161058486604001518660400151610bdb565b949350505050565b6000806105be84600001518460000151610bf0565b90506105db816105d686602001518660200151610bf0565b610c05565b90506105a1816105d686604001518660400151610c19565b60006064631d79e49a825b60f81b846040518363ffffffff1660e01b815260040161064c9291907fff00000000000000000000000000000000000000000000000000000000000000929092168252602082015260400190565b6020604051808303816000875af115801561066b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068f91906110b6565b92915050565b6040517f0cfed56100000000000000000000000000000000000000000000000000000000815260006004820181905260248201839052908190606490630cfed561906044016020604051808303816000875af11580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d91906110b6565b15159392505050565b61074a60405180606001604052806000815260200160008152602001600081525090565b61076e60405180606001604052806000815260200160008152602001600081525090565b610776610c2e565b8152610780610c2e565b602082015261078d610cc9565b6040820152919050565b6107bb60405180606001604052806000815260200160008152602001600081525090565b6107df60405180606001604052806000815260200160008152602001600081525090565b82516107ea90610cd9565b815260208301516107fa90610cd9565b602082015260408301516103f990610ce9565b61083160405180606001604052806000815260200160008152602001600081525090565b61085560405180606001604052806000815260200160008152602001600081525090565b825161086090610cf9565b8152602083015161087090610cf9565b602082015260408301516103f990610d09565b6000806108938360000151610d19565b60c01b77ffffffffffffffffffffffffffffffffffffffffffffffff19168117905060406108c48460200151610d19565b60c01b77ffffffffffffffffffffffffffffffffffffffffffffffff19166bffffffffffffffffffffffff1916901c8117905060806109068460400151610d29565b60e01b7fffffffff0000000000000000000000000000000000000000000000000000000016901c1760601c92915050565b6040517fd9b60b600000000000000000000000000000000000000000000000000000000081527f0400000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff8216602482015260009060649063d9b60b609060440161064c565b6040517fd9b60b600000000000000000000000000000000000000000000000000000000081527f0300000000000000000000000000000000000000000000000000000000000000600482015263ffffffff8216602482015260009060649063d9b60b609060440161064c565b60006064633c6f0e6860045b60f81b8585604051602001610a5f919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610a8c939291906110cf565b6020604051808303816000875af1158015610aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acf91906110b6565b9392505050565b60006064633c6f0e686003610a1f565b6000606463e4f36e1060045b845160208601516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815261064c9360f81b9291906004016110cf565b6000606463e4f36e106003610af2565b60006064637c12a1eb610b5c60048085610d39565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681527fffffff000000000000000000000000000000000000000000000000000000000090911660048201526024810186905260448101859052606401610a8c565b6000606463fe9c73d1610b5c838080610d39565b60006064637c12a1eb610b5c60038085610d39565b600060646342094c56610b5c60048085610d39565b6000606463fb7da35f610b5c838080610d39565b600060646342094c56610b5c60038085610d39565b6000606463134eb89060045b60f81b6040518263ffffffff1660e01b8152600401610c8191907fff0000000000000000000000000000000000000000000000000000000000000091909116815260200190565b6020604051808303816000875af1158015610ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc491906110b6565b905090565b6000606463134eb8906003610c3a565b6000606463c50c9c0260046105fe565b6000606463c50c9c0260036105fe565b6000606463d2c135e560046105fe565b6000606463d2c135e560036105fe565b60006064630cfed56160046105fe565b60006064630cfed56160036105fe565b6000816002811115610d4d57610d4d611087565b60ff166008846004811115610d6457610d64611087565b61ffff16901b61ffff166010866004811115610d8257610d82611087565b62ffffff16901b171760e81b949350505050565b600060208284031215610da857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610acf57600080fd5b600060c08284031215610dde57600080fd5b50919050565b600080600060608486031215610df957600080fd5b833567ffffffffffffffff80821115610e1157600080fd5b610e1d87838801610dcc565b94506020860135915080821115610e3357600080fd5b50610e4086828701610dcc565b92505060408401358015158114610e5657600080fd5b809150509250925092565b600060208284031215610e7357600080fd5b813567ffffffffffffffff811115610e8a57600080fd5b6105a184828501610dcc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715610ee857610ee8610e96565b60405290565b6040516060810167ffffffffffffffff81118282101715610ee857610ee8610e96565b600082601f830112610f2257600080fd5b813567ffffffffffffffff80821115610f3d57610f3d610e96565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610f8357610f83610e96565b81604052838152866020858801011115610f9c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600081360360c0811215610fcf57600080fd5b610fd7610ec5565b6060821215610fe557600080fd5b610fed610eee565b84358152602080860135908201526040808601359082015281526060840135915067ffffffffffffffff8083111561102457600080fd5b61103036848701610f11565b6020830152608085013592508083111561104957600080fd5b61105536848701610f11565b604083015260a085013592508083111561106e57600080fd5b5061107b36838601610f11565b60608201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000602082840312156110c857600080fd5b5051919050565b7fff000000000000000000000000000000000000000000000000000000000000008416815260006020848184015260606040840152835180606085015260005b8181101561112b5785810183015185820160800152820161110f565b5060006080828601015260807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505094935050505056fea2646970667358221220e6ff1df9479236b55eb72a97a6fb27b43ca3b45409d50d0e3a788e5ed948fbe564736f6c63430008130033";

type TestMpcCoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestMpcCoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestMpcCore__factory extends ContractFactory {
  constructor(...args: TestMpcCoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestMpcCore & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestMpcCore__factory {
    return super.connect(runner) as TestMpcCore__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestMpcCoreInterface {
    return new Interface(_abi) as TestMpcCoreInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestMpcCore {
    return new Contract(address, _abi, runner) as unknown as TestMpcCore;
  }
}
