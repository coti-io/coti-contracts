/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  SignedIntegerTestsContract,
  SignedIntegerTestsContractInterface,
} from "../../../../../contracts/mocks/utils/mpc/SignedIntegerTestsContract";

const _abi = [
  {
    inputs: [],
    name: "addResult",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int8",
        name: "a",
        type: "int8",
      },
      {
        internalType: "int8",
        name: "b",
        type: "int8",
      },
    ],
    name: "addTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "andResult",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int8",
        name: "a",
        type: "int8",
      },
      {
        internalType: "int8",
        name: "b",
        type: "int8",
      },
    ],
    name: "andTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "divResult",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int8",
        name: "a",
        type: "int8",
      },
      {
        internalType: "int8",
        name: "b",
        type: "int8",
      },
    ],
    name: "divTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "eqResult",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int8",
        name: "a",
        type: "int8",
      },
      {
        internalType: "int8",
        name: "b",
        type: "int8",
      },
    ],
    name: "eqTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mulResult",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int8",
        name: "a",
        type: "int8",
      },
      {
        internalType: "int8",
        name: "b",
        type: "int8",
      },
    ],
    name: "mulTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "neResult",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int8",
        name: "a",
        type: "int8",
      },
      {
        internalType: "int8",
        name: "b",
        type: "int8",
      },
    ],
    name: "neTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "offBoardCombinedResult",
    outputs: [
      {
        internalType: "ctInt8",
        name: "ciphertext",
        type: "uint256",
      },
      {
        internalType: "ctInt8",
        name: "userCiphertext",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "offBoardResult",
    outputs: [
      {
        internalType: "ctInt8",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int8",
        name: "a",
        type: "int8",
      },
      {
        internalType: "int8",
        name: "b",
        type: "int8",
      },
      {
        internalType: "int8",
        name: "c",
        type: "int8",
      },
    ],
    name: "offBoardTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "offBoardToUserResult",
    outputs: [
      {
        internalType: "ctInt8",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "onBoardResult1",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "onBoardResult2",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "onBoardTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "orResult",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int8",
        name: "a",
        type: "int8",
      },
      {
        internalType: "int8",
        name: "b",
        type: "int8",
      },
    ],
    name: "orTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "gtInt8",
            name: "a8_s",
            type: "uint256",
          },
          {
            internalType: "gtInt8",
            name: "b8_s",
            type: "uint256",
          },
        ],
        internalType: "struct SignedIntegerTestsContract.AllGTCastingValues",
        name: "castingValues",
        type: "tuple",
      },
      {
        internalType: "int8",
        name: "a",
        type: "int8",
      },
      {
        internalType: "int8",
        name: "b",
        type: "int8",
      },
    ],
    name: "setPublicValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "subResult",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int8",
        name: "a",
        type: "int8",
      },
      {
        internalType: "int8",
        name: "b",
        type: "int8",
      },
    ],
    name: "subTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "ctInt8",
            name: "ciphertext",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct itInt8",
        name: "value",
        type: "tuple",
      },
    ],
    name: "validateCiphertextTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "validateResult",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "xorResult",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int8",
        name: "a",
        type: "int8",
      },
      {
        internalType: "int8",
        name: "b",
        type: "int8",
      },
    ],
    name: "xorTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type SignedIntegerTestsContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignedIntegerTestsContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignedIntegerTestsContract__factory extends ContractFactory {
  constructor(...args: SignedIntegerTestsContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SignedIntegerTestsContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SignedIntegerTestsContract__factory {
    return super.connect(runner) as SignedIntegerTestsContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignedIntegerTestsContractInterface {
    return new Interface(_abi) as SignedIntegerTestsContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SignedIntegerTestsContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SignedIntegerTestsContract;
  }
}
