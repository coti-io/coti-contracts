/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { GasTest, GasTestInterface } from "../../contracts/GasTest";

const _abi = [
  {
    inputs: [],
    name: "test1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "test2",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102d0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806366e41cb71461003b5780636b59084d14610045575b600080fd5b61004361004d565b005b61004361006a565b60006100596002610072565b9050610066816001610126565b5050565b600061006660025b6040517fd9b60b600000000000000000000000000000000000000000000000000000000081527f0400000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff8216602482015260009060649063d9b60b60906044016020604051808303816000875af11580156100fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101209190610281565b92915050565b600060646339bd1d8d61013c60048060026101f5565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681527fffffff000000000000000000000000000000000000000000000000000000000090911660048201526024810186905267ffffffffffffffff851660448201526064016020604051808303816000875af11580156101ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ee9190610281565b9392505050565b600081600281111561020957610209610252565b60ff16600884600481111561022057610220610252565b61ffff16901b61ffff16601086600481111561023e5761023e610252565b62ffffff16901b171760e81b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561029357600080fd5b505191905056fea264697066735822122024b86f1e2c83704d02af06383a52cfa1bb753ac769faefd6871f17140246e1f564736f6c63430008130033";

type GasTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GasTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GasTest__factory extends ContractFactory {
  constructor(...args: GasTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      GasTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): GasTest__factory {
    return super.connect(runner) as GasTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasTestInterface {
    return new Interface(_abi) as GasTestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): GasTest {
    return new Contract(address, _abi, runner) as unknown as GasTest;
  }
}
