/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export type CtAddressStruct = {
  ct1: BigNumberish;
  ct2: BigNumberish;
  ct3: BigNumberish;
};

export type CtAddressStructOutput = [ct1: bigint, ct2: bigint, ct3: bigint] & {
  ct1: bigint;
  ct2: bigint;
  ct3: bigint;
};

export type ItAddressStruct = {
  ciphertext: CtAddressStruct;
  signature1: BytesLike;
  signature2: BytesLike;
  signature3: BytesLike;
};

export type ItAddressStructOutput = [
  ciphertext: CtAddressStructOutput,
  signature1: string,
  signature2: string,
  signature3: string
] & {
  ciphertext: CtAddressStructOutput;
  signature1: string;
  signature2: string;
  signature3: string;
};

export interface TestMpcCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decryptNetworkEncryptedAddress"
      | "isEqual"
      | "networkEncryptedAddress"
      | "plaintextAddress"
      | "setIsEqual"
      | "setNetworkEncryptedAddress"
      | "setPublicAddress"
      | "setRandomAddress"
      | "setUserEncryptedAddress"
      | "userEncryptedAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decryptNetworkEncryptedAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isEqual", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "networkEncryptedAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "plaintextAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIsEqual",
    values: [ItAddressStruct, ItAddressStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setNetworkEncryptedAddress",
    values: [ItAddressStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRandomAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUserEncryptedAddress",
    values: [ItAddressStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "userEncryptedAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "decryptNetworkEncryptedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEqual", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "networkEncryptedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "plaintextAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setIsEqual", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNetworkEncryptedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRandomAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserEncryptedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userEncryptedAddress",
    data: BytesLike
  ): Result;
}

export interface TestMpcCore extends BaseContract {
  connect(runner?: ContractRunner | null): TestMpcCore;
  waitForDeployment(): Promise<this>;

  interface: TestMpcCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decryptNetworkEncryptedAddress: TypedContractMethod<[], [void], "nonpayable">;

  isEqual: TypedContractMethod<[], [boolean], "view">;

  networkEncryptedAddress: TypedContractMethod<
    [],
    [[bigint, bigint, bigint] & { ct1: bigint; ct2: bigint; ct3: bigint }],
    "view"
  >;

  plaintextAddress: TypedContractMethod<[], [string], "view">;

  setIsEqual: TypedContractMethod<
    [a_: ItAddressStruct, b_: ItAddressStruct, useEq: boolean],
    [void],
    "nonpayable"
  >;

  setNetworkEncryptedAddress: TypedContractMethod<
    [it_: ItAddressStruct],
    [void],
    "nonpayable"
  >;

  setPublicAddress: TypedContractMethod<
    [addr: AddressLike],
    [void],
    "nonpayable"
  >;

  setRandomAddress: TypedContractMethod<[], [void], "nonpayable">;

  setUserEncryptedAddress: TypedContractMethod<
    [it_: ItAddressStruct],
    [void],
    "nonpayable"
  >;

  userEncryptedAddress: TypedContractMethod<
    [],
    [[bigint, bigint, bigint] & { ct1: bigint; ct2: bigint; ct3: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decryptNetworkEncryptedAddress"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isEqual"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "networkEncryptedAddress"
  ): TypedContractMethod<
    [],
    [[bigint, bigint, bigint] & { ct1: bigint; ct2: bigint; ct3: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "plaintextAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setIsEqual"
  ): TypedContractMethod<
    [a_: ItAddressStruct, b_: ItAddressStruct, useEq: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNetworkEncryptedAddress"
  ): TypedContractMethod<[it_: ItAddressStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPublicAddress"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRandomAddress"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserEncryptedAddress"
  ): TypedContractMethod<[it_: ItAddressStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userEncryptedAddress"
  ): TypedContractMethod<
    [],
    [[bigint, bigint, bigint] & { ct1: bigint; ct2: bigint; ct3: bigint }],
    "view"
  >;

  filters: {};
}
