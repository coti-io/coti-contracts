/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type ItInt8Struct = { ciphertext: BigNumberish; signature: BytesLike };

export type ItInt8StructOutput = [ciphertext: bigint, signature: string] & {
  ciphertext: bigint;
  signature: string;
};

export declare namespace SignedIntegerTestsContract {
  export type AllGTCastingValuesStruct = {
    a8_s: BigNumberish;
    b8_s: BigNumberish;
  };

  export type AllGTCastingValuesStructOutput = [a8_s: bigint, b8_s: bigint] & {
    a8_s: bigint;
    b8_s: bigint;
  };
}

export interface SignedIntegerTestsContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addResult"
      | "addTest"
      | "andResult"
      | "andTest"
      | "divResult"
      | "divTest"
      | "eqResult"
      | "eqTest"
      | "mulResult"
      | "mulTest"
      | "neResult"
      | "neTest"
      | "offBoardCombinedResult"
      | "offBoardResult"
      | "offBoardTest"
      | "offBoardToUserResult"
      | "onBoardResult1"
      | "onBoardResult2"
      | "onBoardTest"
      | "orResult"
      | "orTest"
      | "setPublicValues"
      | "subResult"
      | "subTest"
      | "validateCiphertextTest"
      | "validateResult"
      | "xorResult"
      | "xorTest"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addResult", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addTest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "andResult", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "andTest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "divResult", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "divTest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "eqResult", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eqTest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mulResult", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mulTest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "neResult", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "neTest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offBoardCombinedResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offBoardResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offBoardTest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offBoardToUserResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onBoardResult1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onBoardResult2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onBoardTest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "orResult", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orTest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicValues",
    values: [
      SignedIntegerTestsContract.AllGTCastingValuesStruct,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "subResult", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subTest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateCiphertextTest",
    values: [ItInt8Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "validateResult",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "xorResult", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "xorTest",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "andResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "andTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eqResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eqTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mulResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mulTest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "neResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "neTest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offBoardCombinedResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offBoardResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offBoardTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offBoardToUserResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onBoardResult1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onBoardResult2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onBoardTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orTest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPublicValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subTest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateCiphertextTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xorResult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xorTest", data: BytesLike): Result;
}

export interface SignedIntegerTestsContract extends BaseContract {
  connect(runner?: ContractRunner | null): SignedIntegerTestsContract;
  waitForDeployment(): Promise<this>;

  interface: SignedIntegerTestsContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addResult: TypedContractMethod<[], [bigint], "view">;

  addTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  andResult: TypedContractMethod<[], [bigint], "view">;

  andTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  divResult: TypedContractMethod<[], [bigint], "view">;

  divTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  eqResult: TypedContractMethod<[], [boolean], "view">;

  eqTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  mulResult: TypedContractMethod<[], [bigint], "view">;

  mulTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  neResult: TypedContractMethod<[], [boolean], "view">;

  neTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  offBoardCombinedResult: TypedContractMethod<
    [],
    [[bigint, bigint] & { ciphertext: bigint; userCiphertext: bigint }],
    "view"
  >;

  offBoardResult: TypedContractMethod<[], [bigint], "view">;

  offBoardTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish, c: BigNumberish],
    [void],
    "nonpayable"
  >;

  offBoardToUserResult: TypedContractMethod<[], [bigint], "view">;

  onBoardResult1: TypedContractMethod<[], [bigint], "view">;

  onBoardResult2: TypedContractMethod<[], [bigint], "view">;

  onBoardTest: TypedContractMethod<[], [void], "nonpayable">;

  orResult: TypedContractMethod<[], [bigint], "view">;

  orTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPublicValues: TypedContractMethod<
    [
      castingValues: SignedIntegerTestsContract.AllGTCastingValuesStruct,
      a: BigNumberish,
      b: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  subResult: TypedContractMethod<[], [bigint], "view">;

  subTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  validateCiphertextTest: TypedContractMethod<
    [value: ItInt8Struct],
    [void],
    "nonpayable"
  >;

  validateResult: TypedContractMethod<[], [bigint], "view">;

  xorResult: TypedContractMethod<[], [bigint], "view">;

  xorTest: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "andResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "andTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "divResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "divTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eqResult"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "eqTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mulResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mulTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "neResult"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "neTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "offBoardCombinedResult"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { ciphertext: bigint; userCiphertext: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "offBoardResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "offBoardTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish, c: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "offBoardToUserResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onBoardResult1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onBoardResult2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onBoardTest"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "orResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "orTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPublicValues"
  ): TypedContractMethod<
    [
      castingValues: SignedIntegerTestsContract.AllGTCastingValuesStruct,
      a: BigNumberish,
      b: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "subTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateCiphertextTest"
  ): TypedContractMethod<[value: ItInt8Struct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "xorResult"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "xorTest"
  ): TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
